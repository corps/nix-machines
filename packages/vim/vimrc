colorscheme solarized8
set background=dark
let g:airline_theme='soda'

syntax on
set nocompatible
filetype plugin on
filetype plugin indent on

let purescript_indent_if = 2
let purescript_indent_case = 2
let purescript_indent_let = 2
let purescript_indent_where = 2
let purescript_indent_do = 2
let purescript_indent_in = 2

set vb                          " Visual bell
" set t_Co=256                    " 256 Colors
set t_vb=                       " turn off visual bell
set mouse-=a                     " disable mouse
set hidden                      " don't abadon buffers
set diffopt+=iwhite             " ignore whitespace in diff-mode
set autoread                    " update changed files
" let mapleader = "\<tab>"
map <space> <leader>
map <space><space> <leader><leader>

" Leave terminal mode with escape
tnoremap <Esc> <C-\><C-n>

set hlsearch history=10000

au FileType haskell,vhdl,ada,purescript setlocal commentstring=--\ %s
au FileType vim                         setlocal commentstring="\ %s
au FileType c,cpp,java,go,typescript    setlocal commentstring=//\ %s
au FileType sh,make,ruby                setlocal commentstring=#\ %s
au FileType tex                         setlocal commentstring=%\ %s
au FileType nix                         setlocal commentstring=#\ %s
xmap <leader>,  <Plug>Commentary
nmap <leader>,  <Plug>Commentary
omap <leader>,  <Plug>Commentary
nmap <leader>,, <Plug>CommentaryLine

augroup interoMaps
  au!
  " Maps for intero. Restrict to Haskell buffers so the bindings don't collide.
  " Open intero/GHCi split horizontally
  " Automatically reload on save
  au BufWritePost *.hs InteroReload

  " Load individual modules
  au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
  au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

  " Type-related information
  " Heads up! These next two differ from the rest.
  au FileType haskell map <silent> <leader>t <Plug>InteroGenericType
  au FileType haskell map <silent> <leader>T <Plug>InteroType
  au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

  " Navigation
  au FileType haskell nnoremap <silent> <leader>b :InteroGoToDef<CR>

  " Managing targets
  " Prompts you to enter targets (no silent):
  au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
augroup END

au FileType purescript nm <buffer> <silent> <leader>L :Plist<CR>
au FileType purescript nm <buffer> <silent> <leader>l :Pload!<CR>
au FileType purescript nm <buffer> <silent> <leader>r :Prebuild!<CR>
au FileType purescript nm <buffer> <silent> <leader>f :PaddClause<CR>
au FileType purescript nm <buffer> <silent> <leader>t :PaddType<CR>
au FileType purescript nm <buffer> <silent> <leader>a :Papply<CR>
au FileType purescript nm <buffer> <silent> <leader>A :Papply!<CR>
au FileType purescript nm <buffer> <silent> <leader>C :Pcase!<CR>
au FileType purescript nm <buffer> <silent> <leader>i :Pimport<CR>
au FileType purescript nm <buffer> <silent> <leader>qa :PaddImportQualifications<CR>
au FileType purescript nm <buffer> <silent> <leader>g :Pgoto<CR>
au FileType purescript nm <buffer> <silent> <leader>P :Pursuit<CR>
au FileType purescript nm <buffer> <silent> <leader>T :Ptype<CR>

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0

" neco-ghc
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
let g:necoghc_enable_detailed_browse = 1
let g:necoghc_use_stack = 1

" Intero starts automatically. Set this if you'd like to prevent that.
let g:intero_start_immediately = 1
" Enable type information on hover (when holding cursor at point for ~1 second).
let g:intero_type_on_hover = 1
" Change the intero window size; default is 10.
let g:intero_window_size = 15

" OPTIONAL: Make the update time shorter, so the type info will trigger faster.
set updatetime=1000

" gt for buffer
map <leader>] :BuffergatorMruCycleNext<CR>
" gT for buffer
map <leader>[ :BuffergatorMruCyclePrev<CR>
" close current buffer
map gc :bdelete<CR>

" Allow switching windows even if terminal is open.
tnoremap <C-w>w <C-\><C-n><C-w>w
tnoremap <C-w>W <C-\><C-n><C-w>W

" Fuzzy matching (used instead of ctrlp)
nnoremap <leader>p :FuzzyOpen<CR>

let g:syntastic_always_populate_loc_list = 1

" set incsearch
" haya14busa/incsearch
set ignorecase smartcase        " better searching
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

set backspace=indent,eol,start " Make backspace work cool
set expandtab autoindent tabstop=2 shiftwidth=2
set undolevels=10000            " many undos
set noerrorbells                " no bells and whistles
set novisualbell                " no bells and whistles
set grepprg=grep\ -nH\ $*
set shortmess=a
set shell=bash
set gdefault
set colorcolumn=100
set textwidth=100
set showmatch
set matchtime=5
set laststatus=2 linebreak
set wrap
set showbreak=Â«
set scrolloff=5
set sidescrolloff=5
set sidescroll=1

autocmd FileType make setlocal noexpandtab

" create Backup/tmp/undo dirs
function! InitBackupDir()
  let l:parent = $HOME . '/.vim/'
  let l:backup = l:parent . 'backup/'
  let l:tmpdir = l:parent . 'tmp/'
  let l:undodi = l:parent . 'undo/'
  if !isdirectory(l:parent)
    call mkdir(l:parent)
  endif
  if !isdirectory(l:backup)
    call mkdir(l:backup)
  endif
  if !isdirectory(l:tmpdir)
    call mkdir(l:tmpdir)
  endif
  if !isdirectory(l:undodi)
    call mkdir(l:undodi)
  endif
endfunction

call InitBackupDir()

" backup & Files
set backup
set backupdir=~/.vim/backup//
set directory=~/.vim/tmp//
set viminfo='20,<1000,s100,h,n~/.vim/tmp/info
set undodir=~/.vim/undo//
set undofile

let g:deoplete#enable_at_startup = 1
let g:deoplete#complete_method = "omnifunc"
let g:deoplete#omni_patterns = {}
let g:deoplete#omni_patterns.purescript = ['\w*']
let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.purescript = '[.\w]+'

" autocmd Filetype purescript let b:deoplete_disable_auto_complete = 1

let g:neoformat_only_msg_on_error = 1
let g:neoformat_enabled_typescript = ['prettier']

function! neoformat#formatters#typescript#prettier() abort
    return {
        \ 'exe': 'prettier',
        \ 'args': [ '--stdin', '--no-bracket-spacing', '--trailing-comma', 'es5', '--jsx-bracket-same-line', '--parser', 'typescript'],
        \ 'stdin': 1,
        \ }
endfunction

function! neomake#makers#ft#typescript#EnabledMakers() abort
    return ['tsc', 'tslint']
endfunction

function! neomake#makers#ft#typescript#tsc() abort
    " tsc should not be passed a single file.
    let maker = {
        \ 'args': ['--watch', 'false', '--pretty', 'false'],
        \ 'append_file': 0,
        \ 'errorformat':
            \ '%E%f %#(%l\,%c): error %m,' .
            \ '%E%f %#(%l\,%c): %m,' .
            \ '%Eerror %m,' .
            \ '%C%\s%\+%m'
        \ }
    return maker
endfunction

set number
" let g:vimwiki_list = [{'path': '~/Dropbox/wiki', 'path_html': '~/Dropbox/wiki_html'}]
" let g:tex_flavor = 'latex'

" au BufRead,BufNewFile *.rb set tags=~/izip/darcs/opensource/tags,tags
au BufRead,BufNewFile *.rb set tags=tags,~/c/ramaze/tags
au BufNewFile,BufRead *.m{,ar}{,k}d{,own} set ai formatoptions=tcroqn2 comments=n:> syntax=mkd
au BufNewFile,BufRead *.(byss|rake|ru) set filetype=ruby syntax=ruby
au BufNewFile,BufRead (.irbrc|Vagrantfile) setf ruby
au BufNewFile,BufRead *.st    setf st
au BufNewFile,BufRead *.haml  setf haml
au BufNewFile,BufRead *.neko  setf neko
au BufNewFile,BufRead *.ox    setf oxid
au BufNewFile,BufRead *.fdi   setf xml
au BufNewFile,BufRead *.rl    setf ragel
au BufNewFile,BufRead *.sass  setf sass
au BufNewFile,BufRead *.go    setf go
au BufNewFile,BufRead .envrc  setf sh

call neomake#configure#automake('w')

highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
set wildmode=longest,list:longest,full
