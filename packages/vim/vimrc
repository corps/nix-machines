syntax on

set termguicolors
set background=dark
set hidden
set nocompatible
set backspace=indent,eol,start " Make backspace work cool
set expandtab autoindent tabstop=2 shiftwidth=2
set undolevels=10000            " many undos
set noerrorbells                " no bells and whistles
set novisualbell                " no bells and whistles
set grepprg=grep\ -nH\ $*
set shortmess=a
set shell=bash
set gdefault
set showmatch
set matchtime=5
set laststatus=2 linebreak
set wrap
set tw=0
set showbreak=Â«
set scrolloff=5
set sidescrolloff=5
set sidescroll=1
set vb                          " Visual bell
" set t_Co=256                    " 256 Colors
set t_vb=                       " turn off visual bell
set mouse-=a                     " disable mouse
set hidden                      " don't abadon buffers
set diffopt+=iwhite             " ignore whitespace in diff-mode
set autoread                    " update changed files
set hlsearch history=10000
" OPTIONAL: Make the update time shorter, so the type info will trigger faster.
set updatetime=1000
" backup & Files
set backup
set backupdir=~/.vim/backup//
set directory=~/.vim/tmp//
set viminfo='20,<1000,s100,h,n~/.vim/tmp/info
set undodir=~/.vim/undo//
set undofile
set number

" highlight WhitespaceEOL ctermbg=red guibg=red
" match WhitespaceEOL /\s\+$/
set wildmode=longest,list:longest,full

colorscheme gruvbox
let g:airline_theme='soda'

filetype plugin on
filetype plugin indent on

autocmd CompleteDone * pclose

let g:syntastic_always_populate_loc_list = 1

" let g:neoformat_only_msg_on_error = 1
" let g:neoformat_enabled_typescript = ['prettier']


map <space> <leader>
map <space><space> <leader><leader>
" Leave terminal mode with escape
tnoremap <Esc> <C-\><C-n>

xmap <leader>,  <Plug>Commentary
nmap <leader>,  <Plug>Commentary
omap <leader>,  <Plug>Commentary
nmap <leader>,, <Plug>CommentaryLine


au BufNewFile,BufRead *.m{,ar}{,k}d{,own} set ai formatoptions=tcroqn2 comments=n:> syntax=mkd
au BufNewFile,BufRead *.(byss|rake|ru) set filetype=ruby syntax=ruby
au BufNewFile,BufRead (.irbrc|Vagrantfile) setf ruby
au BufNewFile,BufRead *.st    setf st
au BufNewFile,BufRead *.haml  setf haml
au BufNewFile,BufRead *.neko  setf neko
au BufNewFile,BufRead *.ox    setf oxid
au BufNewFile,BufRead *.fdi   setf xml
au BufNewFile,BufRead *.rl    setf ragel
au BufNewFile,BufRead *.sass  setf sass
au BufNewFile,BufRead *.go    setf go
au BufNewFile,BufRead .envrc  setf sh

au FileType haskell,vhdl,ada,purescript setlocal commentstring=--\ %s
au FileType vim                         setlocal commentstring="\ %s
au FileType c,cpp,java,go,typescript    setlocal commentstring=//\ %s
au FileType sh,make,ruby                setlocal commentstring=#\ %s
au FileType tex                         setlocal commentstring=%\ %s
au FileType nix                         setlocal commentstring=#\ %s

autocmd FileType make setlocal noexpandtab

" gt for buffer
" map <leader>] :BuffergatorMruCycleNext<CR>
" gT for buffer
" map <leader>[ :BuffergatorMruCyclePrev<CR>
" close current buffer
" map gc :bdelete<CR>

" nnoremap <F5> :call LanguageClient_contextMenu()<CR>

" Allow switching windows even if terminal is open.
tnoremap <C-w>w <C-\><C-n><C-w>w
tnoremap <C-w>W <C-\><C-n><C-w>W

" Fuzzy matching (used instead of ctrlp)
" nnoremap <leader>p :FuzzyOpen<CR>

" set incsearch
" haya14busa/incsearch
set ignorecase smartcase        " better searching
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)


" create Backup/tmp/undo dirs
function! InitBackupDir()
  let l:parent = $HOME . '/.vim/'
  let l:backup = l:parent . 'backup/'
  let l:tmpdir = l:parent . 'tmp/'
  let l:undodi = l:parent . 'undo/'
  if !isdirectory(l:parent)
    call mkdir(l:parent)
  endif
  if !isdirectory(l:backup)
    call mkdir(l:backup)
  endif
  if !isdirectory(l:tmpdir)
    call mkdir(l:tmpdir)
  endif
  if !isdirectory(l:undodi)
    call mkdir(l:undodi)
  endif
endfunction

call InitBackupDir()
" call neomake#configure#automake('w')


lua << EOF
local cmp = require'cmp'
cmp.setup { 
  sources = { 
    { name = 'nvim_lsp' },
    { name = 'buffer' },
    { name = 'vsnip' },
  },
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
      -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
      -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },
  mapping = cmp.mapping.preset.insert({
    -- ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    -- ['<C-f>'] = cmp.mapping.scroll_docs(4),
    -- ['<C-Space>'] = cmp.mapping.complete(),
    -- ['<C-e>'] = cmp.mapping.abort(),
    ['<cr>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  }),
}

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  -- vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  -- vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  -- vim.keymap.set('n', '<C-p>', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', '<C-p>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', 'ga', vim.lsp.buf.code_action, bufopts)

  -- vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  -- vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  -- vim.keymap.set('n', '<space>wl', function()
  --  print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  -- end, bufopts)
  -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
end


-- The following example advertise capabilities to `clangd`.
require'lspconfig'.tsserver.setup {
  capabilities = capabilities,
  on_attach = on_attach,
}

require("trouble").setup {
  -- your configuration comes here
  -- or leave it empty to use the default settings
  -- refer to the configuration section below
}

require("transparent").setup({
  enable = true, -- boolean: enable transparent
  extra_groups = { -- table/string: additional groups that should be cleared
    -- In particular, when you set it to 'all', that means all available groups

    -- example of akinsho/nvim-bufferline.lua
    "BufferLineTabClose",
    "BufferlineBufferSelected",
    "BufferLineFill",
    "BufferLineBackground",
    "BufferLineSeparator",
    "BufferLineIndicatorSelected",
  },
  exclude = {}, -- table: groups you don't want to clear
})

require("nnn").setup({
	picker = {
		cmd = "tmux new-session nnn -Pp",
		style = { border = "rounded" },
		session = "shared",
	},
	replace_netrw = "picker",
	-- windownav = "<C-l>"
})
EOF

nnoremap <silent>gr <cmd>Telescope lsp_references<cr>

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fq <cmd>Telescope quickfixes<cr>

set mouse=ar
